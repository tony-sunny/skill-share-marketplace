openapi: 3.0.3
info:
  title: Skill Share Marketplace API
  version: 1.0.0
  description: RESTful API for Skill Share Marketplace.
servers:
  - url: http://localhost:4000/api/v1
paths:
  /auth/signup:
    post:
      summary: Signup as user or provider
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignup"
      responses:
        "201":
          description: User created
        "409":
          description: Email already exists
  /auth/login:
    post:
      summary: Login as user or provider
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials
  /skills:
    get:
      summary: List all skills
      tags:
        - Skills
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 100
          description: Page number (default 1)
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page (default 10)
      responses:
        "200":
          description: List of skills
          content:
            application/json:
              schema:
                type: object
                required:
                  - skills
                  - pagination
                properties:
                  skills:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - id
                          properties:
                            id:
                              type: integer
                        - $ref: "#/components/schemas/Skill"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
    post:
      summary: Create a skill (provider only)
      tags:
        - Skills
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Skill"
      responses:
        "201":
          description: Skill created
  /skills/{id}:
    get:
      summary: Get a skill by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - Skills
      responses:
        "200":
          description: Skill details
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - id
                    properties:
                      id:
                        type: integer
                  - $ref: "#/components/schemas/Skill"
    put:
      summary: Update a skill (provider only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - Skills
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Skill"
      responses:
        "200":
          description: Skill updated
  /tasks:
    get:
      summary: List all tasks
      tags:
        - Tasks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 100
          description: Page number (default 1)
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page (default 10)
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                required:
                  - tasks
                  - pagination
                properties:
                  tasks:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - id
                          properties:
                            id:
                              type: integer
                        - $ref: "#/components/schemas/Task"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
    post:
      summary: Create a task (user only)
      security:
        - BearerAuth: []
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: Task created
  /tasks/{id}:
    get:
      summary: Get a task by ID
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      tags:
        - Tasks
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - id
                    properties:
                      id:
                        type: integer
                  - $ref: "#/components/schemas/Task"
    put:
      summary: Update a task (user only)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: Task updated
  /offers:
    get:
      summary: List all offers for a task
      tags:
        - Offers
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of offers for a task
          content:
            application/json:
              schema:
                type: object
                required:
                  - offers
                  - pagination
                properties:
                  offers:
                    type: array
                    items:
                      allOf:
                        - type: object
                          required:
                            - id
                          properties:
                            id:
                              type: integer
                        - $ref: "#/components/schemas/Offer"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
    post:
      summary: Make an offer (provider only)
      tags:
        - Offers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        "201":
          description: Offer created
  /offers/{id}/status:
    patch:
      summary: Accept/Reject an offer (user only)
      tags:
        - Offers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferStatusUpdate"
      responses:
        "204":
          description: Offer status updated
components:
  schemas:
    UserSignup:
      type: object
      required:
        - email
        - password
        - role
        - role_type
        - first_name
        - last_name
        - mobile
      properties:
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [user, provider]
        role_type:
          type: string
          enum: [individual, company]
        first_name:
          type: string
        last_name:
          type: string
        company_name:
          type: string
        business_tax_number:
          type: string
          minLength: 10
          maxLength: 10
          pattern: "^[A-Z0-9]{10}$"
        representative_first_name:
          type: string
        representative_last_name:
          type: string
        phone:
          type: string
        mobile:
          type: string
        address:
          type: string
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    Skill:
      type: object
      required:
        - category
        - nature_of_work
        - hourly_rate
      properties:
        category:
          type: string
          enum:
            - programming
            - design
            - marketing
        experience:
          type: string
        nature_of_work:
          type: string
          enum: [onsite, online]
        hourly_rate:
          type: number
    Task:
      type: object
      required:
        - category
        - name
        - description
        - expected_start_date
        - hourly_rate
        - rate_currency
      properties:
        category:
          type: string
          enum:
            - programming
            - design
            - marketing
        name:
          type: string
        description:
          type: string
        expected_start_date:
          description: Date is in YYYY-MM-DD format.
          type: string
          format: date
        expected_hours:
          type: integer
        hourly_rate:
          type: number
        rate_currency:
          type: string
          enum: [USD, EUR, GBP]
    Offer:
      type: object
      required:
        - task_id
        - provider_id
      properties:
        task_id:
          type: integer
    OfferStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [accepted, rejected]
    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          default: 1
        limit:
          type: integer
          default: 10
        total:
          type: integer
        total_pages:
          type: integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
